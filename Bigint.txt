struct bigint {
  int a[SZ];
  int len;
  bool neg;

  bool is_zero() const {
    return len == 1 && a[0] == 0;
  }

  int sign() const {
    if (is_zero())
      return 0;
    return neg ? -1 : +1;
  }

  bigint abs() const {
    if (neg)
      return -*this;
    return *this;
  }

  void norm() {
    while (len > 1 && a[len - 1] == 0)
      len--;
    if (is_zero())
      neg = false;
  }

  bigint() {
    len = 1;
    memset(a, 0, sizeof(a));
  }

  explicit bigint(const string& s) {
    len = 0;
    memset(a, 0, sizeof(a));

    neg = s[0] == '-';
    int lf = int(neg);
    if (s[0] == '+')
      lf = 1;

    for (int i = (int)s.size() - 1; i >= lf; i -= LBASE) {
      int cur = 0;
      for (int j = max(lf, i - LBASE + 1); j <= i; j++)
        cur = cur * 10 + s[j] - '0';
      a[len++] = cur;
    }

    norm();
  }

  explicit bigint(int64 x) {
    len = 1;
    memset(a, 0, sizeof(a));
    neg = false;
    if (x < 0) {
      neg = true;
      x *= -1;
    }

    int i = 0;
    for (i = 0; x != 0; i++) {
      a[i] = int(x % BASE);
      x /= BASE;
    }
    len = max(len, i);

    norm();
  }

  string string_value() const {
    char buf[20];
    sprintf(buf, "%d", a[len - 1]);
    string res(buf);

    ford(i, len - 1) {
      sprintf(buf, "%0" SLBASE "d", a[i]);
      res += buf;
    }

    if (neg)
      res = "-" + res;

    return res;
  }

  string str() const {
    return string_value();
  }

  int64 int_value() const {
    int64 res = 0;
    ford(i, len)
      res = res * BASE + a[i];
    if (neg)
      res *= -1;
    return res;
  }

  bigint operator-() const {
    bigint res(*this);
    res.neg ^= true;
    res.norm();
    return res;
  }

  void operator += (const bigint& p) {
    if (p.is_zero())
      return;
    if (this->is_zero()) {
      *this = p;
      return;
    }

    if (neg != p.neg) {
      *this -= -p;
      return;
    }

    int i;
    int carry = 0;
    for (i = 0; i < p.len || carry != 0; i++) {
      carry += a[i] + p.a[i];

      int ncarry = 0;
      while (carry >= BASE) {
        carry -= BASE;
        ncarry++;
      }
      a[i] = carry;
      carry = ncarry;
    }
    len = max(len, i);

    norm();
  }

  void operator -= (const bigint& p) {
    if (p.is_zero())
      return;
    if (this->is_zero()) {
      *this = -p;
      return;
    }

    if (neg != p.neg) {
      *this += -p;
      return;
    }

    len = max(len, p.len);

    int i;
    int carry = 0;
    for (i = 0; (i < p.len || carry != 0) && i < len; i++) {
      carry += a[i] - p.a[i];

      int ncarry = 0;
      while (carry < 0) {
        carry += BASE;
        ncarry--;
      }
      a[i] = carry;
      carry = ncarry;
    }
    if (carry != 0)
      a[len++] = carry;

    if (a[len - 1] < 0) {
      forn(j, len - 1)
        a[j] = BASE - 1 - a[j];
      a[len - 1] = 0;

      for (i = 0; ; i++)
        if (++a[i] < BASE)
          break;
        else
          a[i] = 0;
      len = max(len, i + 1);

      neg ^= true;
    }

    norm();
  }

  void operator *= (int x) {
    if (x < 0) {
      neg ^= true;
      x *= -1;
    }

    int i;
    int64 carry = 0;
    for (i = 0; i < len || carry != 0; i++) {
      carry += a[i] * int64(x);
      a[i] = int(carry % BASE);
      carry /= BASE;
    }
    len = max(len, i);

    norm();
  }

  void operator /= (int x) {
    if (x == 0)
      throw;
    if (x < 0) {
      neg ^= true;
      x *= -1;
    }

    int64 carry = 0;
    ford(i, len) {
      carry = carry * BASE + a[i];
      a[i] = int(carry / x);
      carry %= x;
    }

    norm();
  }

  int operator % (int x) const {
    if (x <= 0)
      throw;

    int carry = 0;
    ford(i, len)
      carry = (carry * int64(BASE) + a[i]) % x;

    if (neg && carry != 0)
      carry = x - carry;

    return carry;
  }

  bigint operator * (const bigint& b) const {
    bigint res;
    res.neg = neg ^ b.neg;
    forn(i, len) {
      int j;
      int64 carry = 0;
      for (j = 0; j < b.len || carry != 0; j++) {
        carry += res.a[i + j] + a[i] * int64(b.a[j]);
        res.a[i + j] = int(carry % BASE);
        carry /= BASE;
      }
      res.len = max(res.len, i + j);
    }
    res.norm();
    return res;
  }

  int cmp(const bigint& p) const {
    int lf = -1, rg = +1;
    if (neg) {
      if (!p.neg)
        return -1;
      swap(lf, rg);
    }

    if (len != p.len)
      return len < p.len ? lf : rg;

    ford(i, len)
      if (a[i] != p.a[i])
        return a[i] < p.a[i] ? lf : rg;
    return 0;
  }

  pair<bigint, bigint> divide(bigint b) const {
    if (b.is_zero())
      throw;

    bigint a = *this;
    bigint res;
    bool res_neg = a.neg ^ b.neg;
    a.neg = b.neg = false;

    int diff = max(0, (a.len - b.len - 1) * LBASE);
    bigint pw10("1" + string(diff, '0'));
    b *= pw10;
    while (b <= a) {
      bigint nb = b * 10;
      if (nb > a)
        break;
      b = nb;
      pw10 *= 10;
    }

    while (!pw10.is_zero()) {
      while (b <= a) {
        a -= b;
        res += pw10;
      }

      b /= 10;
      pw10 /= 10;
    }

    res.neg = res_neg;
    res.norm();
    return mp(res, a);
  }

  bool overflow() const {
    return a[SZ - 1] != 0;
  }

  bigint operator + (const bigint& b) const {
    bigint res(*this);
    res += b;
    return res;
  }

  bigint operator - (const bigint& b) const {
    bigint res(*this);
    res -= b;
    return res;
  }

  bigint operator * (int x) const {
    bigint res(*this);
    res *= x;
    return res;
  }

  void operator *= (const bigint& b) {
    *this = *this * b;
  }

  bigint operator / (int x) const {
    bigint res(*this);
    res /= x;
    return res;
  }

  void operator %= (int x) {
    *this = bigint(*this % x);
  }

  void operator /= (const bigint& p) {
    *this = divide(p).fs;
  }

  bigint operator / (const bigint& p) const {
    return divide(p).fs;
  }

  void operator %= (const bigint& p) {
    *this = divide(p).sc;
  }

  bigint operator % (const bigint& p) const {
    return divide(p).sc;
  }

  bool operator < (const bigint& p) const {
    return cmp(p) < 0;
  }

  bool operator <= (const bigint& p) const {
    return cmp(p) <= 0;
  }

  bool operator > (const bigint& p) const {
    return cmp(p) > 0;
  }

  bool operator >= (const bigint& p) const {
    return cmp(p) >= 0;
  }

  bool operator == (const bigint& p) const {
    return cmp(p) == 0;
  }

  bool operator != (const bigint& p) const {
    return cmp(p) != 0;
  }
};
