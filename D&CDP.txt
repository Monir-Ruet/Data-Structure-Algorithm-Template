const int N=2e5;
vector<ll>dp_before(N),dp_curr(N);
ll costCount(int l,int r){
  // Cost function according to need;
}
void compute(int l,int r,int optl,int optr){
  if(l>r) return ;
  int mid=(l+r)/2;
  pair<ll,int>best={LLONG_MAX,-1};
  for(int k=optl;k<=min(mid,optr);k++){
    best=min(best,make_pair(dp_before[k-1]+costCount(k,mid),k));
  }
  dp_curr[mid]=best.first;
  int optm=best.second;
  compute(l,mid-1,optl,optm);
  compute(mid+1,r,optm,optr);
}

ll solution(){
  for(int i=1;i<=n;i++) dp_before[i]=costCount(1,i);
  for(int i=2;i<=m;i++){
    compute(1,n,1,n);
    dp_before=dp_curr;
  }
  return dp_before[n];
}
