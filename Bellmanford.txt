vector<array<ll,3>>edge;
vector<ll>dist,parent,path;
bool cycle;
void bellmanford(int s,int n){
  fill(dist.begin(),dist.end(),INT_MAX);
  dist[s] = 0;
  int x;
  bool changed;
  for (int i=0; i<n; ++i){
    x = -1;
    changed=false;
    for(auto [u,v,w]:edge){
      if (dist[u] <INT_MAX){
        if (dist[v] > dist[u] +w){
          dist[v] = max ((ll)INT_MIN, dist[u] + w);
          parent[v] = u;
          x = v;
          changed=1;
        }
      }
    }
    if(!changed)
      break;
  }
  if (x == -1)
    cycle=false;
  else{
    int y = x;
    for (int i=0; i<n; ++i)
      y = parent[y];
    for (int cur=y; ; cur=parent[cur]){
      if (cur == y && path.size() > 1)
        break;
      path.push_back (cur);
    }
    reverse (path.begin(), path.end());
    for(auto i:path)
      cout<<i+1<<" ";
    cout<<nl;
  }
}

