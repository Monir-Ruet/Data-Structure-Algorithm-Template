// Heavy Light Decompostion
// Segment Tree query must change according to your need


const int N=2e5+5;
ll n,q,depth[N],parent[N],heavy[N],head[N],sz[N],V[N],pos[N],tree[2*N];
vector<ll>adj[N];

ll work(ll a,ll b){
  return a+b;
}
void update(int idx,ll val){
  for(tree[idx += n]=val;idx>1; idx>>=1)
    tree[idx>>1] = work(tree[idx], tree[idx ^ 1]);
}

ll query(int l,int r){
  ll ans=0;
  for(l+=n,r+=n;l<r;l>>=1,r>>=1){
    if(l & 1) ans=work(ans,tree[l++]);
    if(r & 1) ans=work(ans,tree[--r]);
  }
  return ans;
}

void dfs(int s,int p){
  parent[s]=p;
  sz[s]=1;
  heavy[s]=-1;
  depth[s]=depth[p]+1;
  ll mx=-1;
  for(auto i:adj[s]){
    if(i==p) continue;
    dfs(i,s);
    sz[s]+=sz[i];
    if(mx<sz[i])
      heavy[s]=i,mx=sz[i];
  }
}

ll tin;
void HLD(int s,int top){
  head[s]=top;
  pos[s]=tin++;
  if(heavy[s]!=-1) HLD(heavy[s],top);
  for(auto i:adj[s]){
    if(i==parent[s] || i==heavy[s]) continue;
    HLD(i,i);
  }
}

ll path(int l,int r){
  ll ans=0;
  for(;head[l] != head[r]; r=parent[head[r]]){
    if(depth[head[l]]>depth[head[r]]) swap(l,r);
    ans=work(ans,query(pos[head[r]],pos[r]+1));
  }
  if(depth[l]>depth[r]) swap(l,r);
  ans=work(ans,query(pos[l],pos[r]+1));
  return ans;
}
