const ll mod=1e9+7;
struct mi {
  ll v; explicit operator ll() const { return v; }
  mi() { v = 0; }
  mi(ll _v) {
    v = (-mod < _v && _v < mod) ? _v : _v % mod;
    if (v < 0) v += mod;
  }
  friend bool operator==(const mi& a,ll b){
    return a.v==b; }
  friend bool operator!=(const mi& a,ll b){
    return a.v!=b; }
  friend bool operator==(const mi& a, const mi& b) {
    return a.v == b.v; }
  friend bool operator!=(const mi& a, const mi& b) {
    return !(a == b); }
  friend bool operator<(const mi& a, const mi& b) {
    return a.v < b.v; }
  mi& operator+=(const mi& m) {
    if ((v += m.v) >= mod) v -= mod;
    return *this; }
  mi& operator-=(const mi& m) {
    if ((v -= m.v) < 0) v += mod;
    return *this; }
  mi& operator*=(const mi& m) {
    v = v*m.v%mod; return *this; }
  mi& operator/=(const mi& m) { return (*this) *= modInv(m); }
  friend mi pow(mi a, ll p) {
    mi ans = 1; assert(p >= 0);
    for (; p; p /= 2, a *= a) if (p&1) ans *= a;
    return ans;
  }
  friend mi modInv(const mi& a) { assert(a.v != 0);
    return pow(a,mod-2); }

  mi operator-() const { return mi(-v); }
  mi& operator++() { return *this += 1; }
  mi& operator--() { return *this -= 1; }
  mi operator++(int) { mi temp; temp.v = v++; return temp; }
  mi operator--(int) { mi temp; temp.v = v--; return temp; }
  friend mi operator+(mi a, const mi& b) { return a += b; }
  friend mi operator-(mi a, const mi& b) { return a -= b; }
  friend mi operator*(mi a, const mi& b) { return a *= b; }
  friend mi operator/(mi a, const mi& b) { return a /= b; }
  friend ostream& operator<<(ostream& os, const mi& m) {
    os << m.v; return os;
  }
  friend istream& operator>>(istream& is, mi& m) {
    ll x; is >> x;
    m.v = x;
    return is;
  }
};

const int N=1e6+5;
mi fact[N],inv[N];
void init(){
  fact[0]=1;
  for(int i=1;i<N;i++)
    fact[i]=fact[i-1] * i;
  inv[N-1]=modInv(fact[N-1]);
  for(int i=N-2;i>=0;i--)
    inv[i] = inv[i+1] *(i+1);
}
mi choose(int n,int k){
  if(k>n) return 0;
  return fact[n] * inv[k] * inv[n-k];
}
