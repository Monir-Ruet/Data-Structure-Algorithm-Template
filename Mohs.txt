void add(int i);
void remove(int i);
ll get_answer();
const int BLOCK=330;
struct Query{
  int l,r,idx;
  Query(int _l,int _r,int _idx){
    l=_l,r=_r,idx=_idx;
  }
  inline bool operator<(Query & x) const{
    if(l/BLOCK==x.l/BLOCK) return ((l/BLOCK) & 1)? r>x.r : r<x.r;
    return l/BLOCK<x.l/BLOCK;
  }
};


vector<ll>MOHS(vector<Query>queries){
  vector<ll>ans(queries.size());
  sort(queries.begin(),queries.end());
  ll l=0,r=-1;
  for(Query q: queries){
    while(l>q.l){
      l--;
      add(l);
    }
    while(r<q.r){
      r++;
      add(r);
    }
    while(l<q.l){
      remove(l);
      l++;
    }
    while(r>q.r){
      remove(r);
      r--;
    }
    ans[q.idx]=get_answer();
  }
  return ans;
}

